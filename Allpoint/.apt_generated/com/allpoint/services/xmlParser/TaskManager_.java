//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.allpoint.services.xmlParser;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import com.allpoint.model.ResultContainter;
import com.allpoint.services.InternetConnectionManager_;
import com.allpoint.services.xmlParser.TaskManager.QueryId;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class TaskManager_
    extends TaskManager
{

    private Context context_;
    private static TaskManager_ instance_;
    private Handler handler_ = new Handler(Looper.getMainLooper());

    private TaskManager_(Context context) {
        context_ = context;
    }

    public static TaskManager_ getInstance_(Context context) {
        if (instance_ == null) {
            OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(null);
            instance_ = new TaskManager_(context.getApplicationContext());
            instance_.init_();
            OnViewChangedNotifier.replaceNotifier(previousNotifier);
        }
        return instance_;
    }

    private void init_() {
        connectionManager = InternetConnectionManager_.getInstance_(context_);
    }

    @Override
    public void taskFinished(final String taskId, final QueryId queryId, final ErrorType error, final ResultContainter results) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                TaskManager_.super.taskFinished(taskId, queryId, error, results);
            }

        }
        );
    }

    @Override
    public void taskExecute(final String taskId, final QueryId queryId, final String url) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    TaskManager_.super.taskExecute(taskId, queryId, url);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

}
